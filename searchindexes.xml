<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>我使用 Docker 运行 MariaDB 的常用命令及部分参数解析</title><url>/posts/docker-run-parameters/</url><categories><category>学习笔记</category></categories><tags><tag>Docker</tag><tag>MySQL</tag></tags><content type="html"><![CDATA[  本文介绍我使用 Docker 启动 MariaDB 镜像的常用参数，这些参数亦适用于 MySQL 镜像，把命令中的mariadb换成mysql也可以正常运行没有问题。
MariaDB 数据库软件是 MySQL 数据库软件的一个社区版分支，MariaDB 数据库兼容 MySQL，但二者的驱动程序互不兼容。
本人常用的 Docker 运行 MariaDB 命令配置如下：
docker run -e=&amp;#34;MYSQL_ROOT_PASSWORD=123456&amp;#34; -e=&amp;#34;LANG=C.UTF-8&amp;#34; -v=mysql-data:/var/lib/mysql --restart=unless-stopped --name=mariadb -p 3306:3306 -d mariadb 逐行分解版：
docker run \ -e=&amp;#34;MYSQL_ROOT_PASSWORD=mypassword&amp;#34; \ -e=&amp;#34;LANG=C.UTF-8&amp;#34; \ -v=mysql-data:/var/lib/mysql \ --restart=unless-stopped \ --name=mariadb \ -p 3306:3306 \ -d \ mariadb -e是--env的缩写，这一参数用于设置容器中程序的环境变量。 MYSQL_ROOT_PASSWORD变量是指定MySQL(或MariaDB)的 ROOT 用户初始密码。 LANG变量是避免使用docker exec命令进入容器时控制台显示的非英文字符串变成乱码。这一变量是否设置对于使用Navicat、Dbeaver、Datagrip等数据库客户端没有影响。 注：如果不将LANG=C.UTF-8用英文引号括起来，由于变量中存在=号，Docker 会识别错误，报“invalid reference format”（无效的引用格式）错误，如下所示： &amp;gt; docker run -e=MYSQL_ROOT_PASSWORD=123456 -e=LANG=C.UTF-8 -p 3306:3306 -d mariadb docker: invalid reference format: repository name must be lowercase. See &amp;#39;docker …  ]]></content></entry><entry><title>博客已重建</title><url>/posts/blog-rebuilded/</url><categories><category>杂记</category></categories><tags><tag><no value=/></tags><content type="html"> 本博客站点已被重新建立。</content></entry><entry><title>项目复盘笔记</title><url>/posts/project-review-2022-10-14/</url><categories><category>杂记</category></categories><tags><tag>复盘</tag></tags><content type="html"> 这是一份简单的项目复盘。
这个项目是一个简单的前端项目，项目使用了git。参与者有3人，我在其中负责部分网页模块、样式，也部分担任了项目合并的工作。
遇到的问题
需要网页适配不同的屏幕宽度 参考已有页面的效果，按照页面宽度设置不同的行为。 使用的jQuery插件不能很好地适配页面，导致已经做好的页面布局异常 解决方案： 对于较大型的插件，使项目样式适配插件； 对于较小型的插件，重写要实现的主要功能。 预期效果无法完全实现，要实现一些细节上的动画效果很花时间 权衡之下做出取舍，舍弃20%的细节动画，把时间主要用在实现80%的主要功能上。 修改一处变量命名/文件路径导致出现bug 解决方案：对于变量命名/文件路径，要么不要改，要么就连同其用法一起改。 由不同人负责的部分巧合地共用了一个样式选择器名，但是页面引用的某个CSS文件中没有限定该选择器的范围，导致样式被错误地应用到它不应该出现的地方。 之后修改了一些同名的class，又在CSS文件中限定相应样式的使用范围，总算解决了这个问题。 感想
参与多人项目的感想 多人项目中，合作是很重要的 创作个人项目时自己可以无所顾忌，想写什么写什么；但在参与多人项目时，需要考虑自己编写的模块到会不会影响到别人的。 你不可能根据自己的习惯去规定别人一定要怎么做，所以需要达成共识。 各人编程习惯不同，我们应该努力做到“和而不同” 我们应该共同为项目的完成而努力，使得每个参与者的工作成果“和谐共处”，在合并的时候不出问题。 但“和而不同”需要时间磨合，本次项目时间有限，成员间有共识，但不多，还是各干各的。 项目开始前先设立好大致框架和规范可以解决一些不必要的麻烦 例如，对于共用的资源，要约定好要用到什么资源和接口，规定好共用资源的路径，再在此基础上进行改进。 本次项目我们没有提前设立框架，每个人的文件放置的地方都不一样，合并时就很麻烦了。 解决bug时印象深刻的事情 git自动合并出错导致文件的错误覆盖 后面通过历史记录找回了，但今后还是要小心。 全局设置牵一发而动全身，不应该往里面随便加东西。 虽然本次项目使用了git做项目管理，但由于沟通不畅的原因，项目进度从中期开始混乱…… 我们遇到一个以我们自身的能力难以解决的大bug，在大佬的帮助下，最后发现这个大bug是之前遗漏的小bug积累起来共同造成的结果。 真的遇上了“依靠bug运行”的 …</content></entry><entry><title>关于我</title><url>/about.html</url><categories/><tags/><content type="html"> 这里是yha4o2l。
设立本博客的主要目的是纪录一些学习笔记，但也会写些书籍读后感、影视观后感、游戏玩后感之类的文章。
本博客已启用基于 giscus 的评论功能（由 GitHub Discussions 驱动），对文章进行评论需要登录Github账号。</content></entry></search>